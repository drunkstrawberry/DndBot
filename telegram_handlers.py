# -*- coding: utf-8 -*-
# telegram_handlers.py
import logging
import os
import time # For sleep in message splitting
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

from character_generator import generate_dnd_character_profile_for_bot # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ---
(CHOOSE_RACE, CHOOSE_CLASS, CHOOSE_BACKGROUND, CHOOSE_ALIGNMENT,
 GET_LOCATION, GET_STATS_PREF, GET_DETAILS) = range(7)

# --- –û–ø—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
srd_races_options = ["–ß–µ–ª–æ–≤–µ–∫", "–≠–ª—å—Ñ (–í—ã—Å—à–∏–π)", "–î–≤–∞—Ä—Ñ (–•–æ–ª–º–æ–≤–æ–π)", "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫ (–õ–µ–≥–∫–æ–Ω–æ–≥–∏–π)",
                     "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π", "–ì–Ω–æ–º (–õ–µ—Å–Ω–æ–π)", "–ü–æ–ª—É—ç–ª—å—Ñ", "–ü–æ–ª—É–æ—Ä–∫", "–¢–∏—Ñ–ª–∏–Ω–≥", "–ê–≤—Ç–æ (SRD —Ä–∞—Å–∞)"]
srd_classes_options = ["–í–∞—Ä–≤–∞—Ä", "–ë–∞—Ä–¥", "–ñ—Ä–µ—Ü", "–î—Ä—É–∏–¥", "–í–æ–∏–Ω", "–ú–æ–Ω–∞—Ö",
                       "–ü–∞–ª–∞–¥–∏–Ω", "–°–ª–µ–¥–æ–ø—ã—Ç", "–ü–ª—É—Ç", "–ß–∞—Ä–æ–¥–µ–π", "–ö–æ–ª–¥—É–Ω (–ò—Å—á–∞–¥–∏–µ)", "–í–æ–ª—à–µ–±–Ω–∏–∫", "–ê–≤—Ç–æ (SRD –∫–ª–∞—Å—Å)"]
srd_backgrounds_options = ["–ü—Ä–∏—Å–ª—É–∂–Ω–∏–∫", "–®–∞—Ä–ª–∞—Ç–∞–Ω", "–ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫", "–ê—Ä—Ç–∏—Å—Ç", "–ù–∞—Ä–æ–¥–Ω—ã–π –ì–µ—Ä–æ–π",
                           "–†–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫ –ì–∏–ª—å–¥–∏–∏", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π", "–ß—É–∂–µ–∑–µ–º–µ—Ü",
                           "–ú—É–¥—Ä–µ—Ü", "–ú–æ—Ä—è–∫", "–°–æ–ª–¥–∞—Ç", "–ë–µ—Å–ø—Ä–∏–∑–æ—Ä–Ω–∏–∫", "–ê–≤—Ç–æ (SRD –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è)"]
srd_alignments_options = [
    "–ó–∞–∫–æ–Ω–Ω–æ-–î–æ–±—Ä—ã–π", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–î–æ–±—Ä—ã–π", "–•–∞–æ—Ç–∏—á–Ω–æ-–î–æ–±—Ä—ã–π",
    "–ó–∞–∫–æ–Ω–Ω–æ-–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–ò—Å—Ç–∏–Ω–Ω–æ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–•–∞–æ—Ç–∏—á–Ω–æ-–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
    "–ó–∞–∫–æ–Ω–Ω–æ-–ó–ª–æ–π", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–ó–ª–æ–π", "–•–∞–æ—Ç–∏—á–Ω–æ-–ó–ª–æ–π", "–ê–≤—Ç–æ (–ø–æ–¥—Ö–æ–¥—è—â–µ–µ)"
]

def create_reply_keyboard(options_list, items_per_row=2):
    return [options_list[i:i + items_per_row] for i in range(0, len(options_list), items_per_row)]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø D&D –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π v0.5 (PDF –≤ –ø–∞–º—è—Ç–∏!). " # –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π /create –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /create.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

async def create_character_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    reply_keyboard = create_reply_keyboard(srd_races_options)
    await update.message.reply_text(
        "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! üßô‚Äç‚ôÇÔ∏è\n–í—ã–±–µ—Ä–∏ —Ä–∞—Å—É –∏–ª–∏ '–ê–≤—Ç–æ'.",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–†–∞—Å–∞ –∏–ª–∏ '–ê–≤—Ç–æ'")
    )
    return CHOOSE_RACE

async def _handle_choice_and_proceed(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   current_data_key: str,
                                   next_prompt_text: str,
                                   next_options_list: list | None,
                                   next_state: int,
                                   items_per_row_for_next: int = 2) -> int:
    user_choice = update.message.text.strip()
    chosen_value_display = "–ê–≤—Ç–æ" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ-–≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±–æ—Ä –∞–≤—Ç–æ-–≤–∞—Ä–∏–∞–Ω—Ç–æ–º –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–æ–º
    is_auto = any(auto_keyword in user_choice.lower() for auto_keyword in ["–∞–≤—Ç–æ", "—Å–ª—É—á–∞–π–Ω–∞—è", "–ø–æ–¥—Ö–æ–¥—è—â–µ–µ", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"])

    if is_auto or not user_choice: # –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º –∑–∞ "–∞–≤—Ç–æ"
        context.user_data[current_data_key] = None
    else:
        context.user_data[current_data_key] = user_choice
        chosen_value_display = user_choice

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫–ª—é—á–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    key_display_name_map = {
        'race': '–†–∞—Å–∞',
        'class': '–ö–ª–∞—Å—Å',
        'background': '–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è (Background)',
        'alignment': '–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ',
        'location': '–õ–æ–∫–∞—Ü–∏—è/–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ',
        'stats_preference': '–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º',
        'details': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏'
    }
    display_key = key_display_name_map.get(current_data_key, current_data_key.replace('_', ' ').capitalize())

    await update.message.reply_text(f"{display_key}: {chosen_value_display}.")

    if next_options_list:
        placeholder_text = f"{next_options_list[0].split(' ')[0]} –∏–ª–∏ '–ê–≤—Ç–æ'" if next_options_list else "–í–∞—à –≤—ã–±–æ—Ä"
        reply_keyboard_markup = ReplyKeyboardMarkup(
            create_reply_keyboard(next_options_list, items_per_row_for_next),
            one_time_keyboard=True,
            resize_keyboard=True,
            input_field_placeholder=placeholder_text
        )
        await update.message.reply_text(next_prompt_text, reply_markup=reply_keyboard_markup)
    else: # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
         await update.message.reply_text(next_prompt_text, reply_markup=ReplyKeyboardRemove())
    return next_state

async def choose_race(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await _handle_choice_and_proceed(update, context, 'race', "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å –∏–ª–∏ '–ê–≤—Ç–æ'.", srd_classes_options, CHOOSE_CLASS)

async def choose_class(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await _handle_choice_and_proceed(update, context, 'class', "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é (background) –∏–ª–∏ '–ê–≤—Ç–æ'.", srd_backgrounds_options, CHOOSE_BACKGROUND)

async def choose_background(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await _handle_choice_and_proceed(update, context, 'background', "–ö–∞–∫–æ–µ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ —É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? –ò–ª–∏ '–ê–≤—Ç–æ'.", srd_alignments_options, CHOOSE_ALIGNMENT, 3)

async def choose_alignment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await _handle_choice_and_proceed(update, context, 'alignment',
                                          "–û—Ç–∫—É–¥–∞ —Ä–æ–¥–æ–º —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–ª–∏ –≥–¥–µ –æ–Ω —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ç–∏—Ö–∞—è –¥–µ—Ä–µ–≤–Ω—è –§–∞–Ω–¥–∞–ª–∏–Ω')\n–ï—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ, –Ω–∞–ø–∏—à–∏ '–∞–≤—Ç–æ' –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                                          None, GET_LOCATION)

async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await _handle_choice_and_proceed(update, context, 'location',
                                          "–ï—Å—Ç—å –ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (—Å—Ç–∞—Ç–∞–º)?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≥–ª–∞–≤–Ω–æ–µ - –≤—ã—Å–æ–∫–∏–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –õ–æ–≤–∫–æ—Å—Ç—å')\n–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ '–∞–≤—Ç–æ' –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                                          None, GET_STATS_PREF)

async def get_stats_preference(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
     return await _handle_choice_and_proceed(update, context, 'stats_preference',
                                           "–ò –Ω–∞–∫–æ–Ω–µ—Ü, –∫–∞–∫–∏–µ-—Ç–æ –æ—Å–æ–±—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞?\n–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ '–∞–≤—Ç–æ' –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                                           None, GET_DETAILS)

async def get_details_and_generate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_details_input = update.message.text.strip()
    is_auto = any(auto_keyword in user_details_input.lower() for auto_keyword in ["–∞–≤—Ç–æ", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"])

    details_display = '–ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'
    if is_auto or not user_details_input:
        context.user_data['details'] = None
    else:
        context.user_data['details'] = user_details_input
        details_display = user_details_input

    await update.message.reply_text(
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: {details_display}.\n\n"
        "–°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ PDF. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...",
        reply_markup=ReplyKeyboardRemove()
    )

    ud = context.user_data
    await update.message.chat.send_action(action="typing")

    generation_result = await generate_dnd_character_profile_for_bot(
            user_race=ud.get('race'), user_class=ud.get('class'),
            user_background=ud.get('background'), user_alignment=ud.get('alignment'),
            user_location=ud.get('location'), user_stats_preference=ud.get('stats_preference'),
            user_details=ud.get('details'), user_id=str(update.effective_user.id)
        )

    text_profile = generation_result.get("text_profile")
    pdf_buffer = generation_result.get("pdf_buffer") # –ü–æ–ª—É—á–∞–µ–º –±—É—Ñ–µ—Ä PDF
    parsed_data = generation_result.get("parsed_data") # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

    error_prefix_tuple = ("–ó–ê–ü–†–û–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù", "–ö–û–ù–¢–ï–ù–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù", "–û–®–ò–ë–ö–ê API", "–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞", "–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π")

    if text_profile and not any(text_profile.startswith(prefix) for prefix in error_prefix_tuple):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(text_profile) > 4096: # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
             await update.message.reply_text("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –í–æ—Ç –µ–≥–æ —á–∞—Å—Ç–∏:")
             for i in range(0, len(text_profile), 4090): # –î–µ–ª–∏–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º
                 await update.message.chat.send_action(action="typing")
                 await update.message.reply_text(text_profile[i:i + 4090])
                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º context.application.bot.send_chat_action –µ—Å–ª–∏ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Application v20+
                 if hasattr(context, 'application') and hasattr(context.application, 'bot'):
                     await context.application.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
                 time.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
        else:
            await update.message.reply_text(text_profile)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (pdf_buffer –Ω–µ None)
        if pdf_buffer:
            try:
                await update.message.chat.send_action(action="upload_document")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                char_name_for_file = "UnknownCharacter"
                if parsed_data and parsed_data.get('name'):
                    # –û—á–∏—â–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    char_name_for_file = "".join(c if c.isalnum() else "_" for c in parsed_data.get('name'))

                user_id_str = str(update.effective_user.id)
                # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                pdf_filename_for_user = f"DND_Character_{char_name_for_file}_{user_id_str}.pdf"

                # pdf_buffer.seek(0) # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ—Ç—Å—è –≤ pdf_generator.py –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –±—É—Ñ–µ—Ä–∞

                await update.message.reply_document(
                    document=pdf_buffer, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –∏–∑ –ø–∞–º—è—Ç–∏
                    filename=pdf_filename_for_user, # –ò–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    caption="–í–æ—Ç PDF —Å —Ç–≤–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º!"
                )
                logger.info(f"PDF –∏–∑ –ø–∞–º—è—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
            except Exception as e_send_pdf:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}: {e_send_pdf}")
                await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF —Ñ–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤—ã—à–µ.")
        else:
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ pdf_buffer —Ä–∞–≤–µ–Ω None (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF)
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤—ã—à–µ.")

    elif text_profile: # –ï—Å–ª–∏ text_profile —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç LLM
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {text_profile}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /create")
    else: # –ï—Å–ª–∏ text_profile –ø—É—Å—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /create")

    await update.message.reply_text("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∏—Å–ø–æ–ª—å–∑—É–π /create.")
    context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
    return ConversationHandler.END
